import heapq
class PuzzleState:
    def __init__(self, board, empty_tile_position, moves=0):
        self.board = board
        self.empty_tile_position = empty_tile_position
        self.moves = moves
        self.size = int(len(board) ** 0.5)
        self.goal = self.generate_goal()
        self.f = self.moves + self.heuristic()

    def generate_goal(self):
        return [i for i in range(1, self.size ** 2)] + [0]

    def heuristic(self):
        distance = 0
        for i in range(self.size ** 2):
            if self.board[i] != 0:
                current_row, current_col = divmod(i, self.size)
                goal_row, goal_col = divmod(self.board[i] - 1, self.size)
                distance += abs(current_row - goal_row) + abs(current_col - goal_col)
        return distance

    def get_neighbors(self):
        neighbors = []
        row, col = divmod(self.empty_tile_position, self.size)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < self.size and 0 <= new_col < self.size:
                new_empty_tile_position = new_row * self.size + new_col
                new_board = list(self.board)
                new_board[self.empty_tile_position], new_board[new_empty_tile_position] = new_board[new_empty_tile_position], new_board[self.empty_tile_position]
                neighbors.append(PuzzleState(new_board, new_empty_tile_position, self.moves + 1))
        return neighbors

    def is_goal(self):
        return self.board == self.goal

    def __lt__(self, other):
        return self.f < other.f

def a_star(initial_state):
    open_set = []
    closed_set = set()
    heapq.heappush(open_set, initial_state)

    while open_set:
        current_state = heapq.heappop(open_set)

        if current_state.is_goal():
            return current_state.moves

        closed_set.add(tuple(current_state.board))

        for neighbor in current_state.get_neighbors():
            if tuple(neighbor.board) in closed_set:
                continue
            heapq.heappush(open_set, neighbor)

    return None

if __name__ == "__main__":
    initial_board = [1, 2, 3, 4, 5, 6, 7, 0, 8]
    empty_tile_position = initial_board.index(0)
    initial_state = PuzzleState(initial_board, empty_tile_position)
    moves = a_star(initial_state)

    if moves is not None:
        print(f"Solution found in {moves} moves.")
    else:
        print("No solution found.")
