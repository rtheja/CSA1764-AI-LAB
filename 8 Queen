def is_safe(board, row, col):
    for i in range(col):
        if board[row][i] == 1:
            return False
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    for i, j in zip(range(row, len(board)), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    return True

def solve_n_queens_util(board, col, solutions):
    if col >= len(board):
        solutions.append([''.join('Q' if cell == 1 else '.' for cell in row) for row in board])
        return
    for i in range(len(board)):
        if is_safe(board, i, col):
            board[i][col] = 1
            solve_n_queens_util(board, col + 1, solutions)
            board[i][col] = 0

def solve_n_queens(n):
    board = [[0] * n for _ in range(n)]
    solutions = []
    solve_n_queens_util(board, 0, solutions)
    return solutions

if __name__ == "__main__":
    n = 8
    solutions = solve_n_queens(n)
    for index, solution in enumerate(solutions):
        print(f"Solution {index + 1}:")
        for row in solution:
            print(row)
        print()
