import heapq

class Node:
    def __init__(self, name, parent=None, g=0, h=0):
        self.name = name
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f

class Graph:
    def __init__(self):
        self.edges = {}
        self.heuristics = {}

    def add_edge(self, from_node, to_node, cost):
        if from_node not in self.edges:
            self.edges[from_node] = {}
        self.edges[from_node][to_node] = cost

    def set_heuristic(self, node, heuristic):
        self.heuristics[node] = heuristic

    def a_star(self, start, goal):
        open_list = []
        closed_list = set()
        start_node = Node(start, None, 0, self.heuristics.get(start, 0))
        heapq.heappush(open_list, start_node)

        while open_list:
            current_node = heapq.heappop(open_list)

            if current_node.name == goal:
                return self.reconstruct_path(current_node)

            closed_list.add(current_node.name)

            for neighbor, cost in self.edges.get(current_node.name, {}).items():
                if neighbor in closed_list:
                    continue

                g_score = current_node.g + cost
                h_score = self.heuristics.get(neighbor, 0)
                neighbor_node = Node(neighbor, current_node, g_score, h_score)

                if neighbor_node not in open_list:
                    heapq.heappush(open_list, neighbor_node)

        return None

    def reconstruct_path(self, node):
        path = []
        while node:
            path.append(node.name)
            node = node.parent
        return path[::-1]

if __name__ == "__main__":
    g = Graph()
    
    g.add_edge('A', 'B', 1)
    g.add_edge('A', 'C', 4)
    g.add_edge('B', 'C', 2)
    g.add_edge('B', 'D', 5)
    g.add_edge('C', 'D', 1)
    g.add_edge('D', 'E', 3)

    g.set_heuristic('A', 7)
    g.set_heuristic('B', 6)
    g.set_heuristic('C', 2)
    g.set_heuristic('D', 1)
    g.set_heuristic('E', 0)

    start = 'A'
    goal = 'E'
    
    path = g.a_star(start, goal)
    print("A* path from", start, "to", goal, ":", path)
