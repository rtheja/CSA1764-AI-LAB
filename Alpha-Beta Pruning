class Node:
    def __init__(self, state, value=None):
        self.state = state
        self.value = value
        self.children = []

def alpha_beta(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or not node.children:
        return node.value

    if maximizing_player:
        max_eval = float('-inf')
        for child in node.children:
            eval = alpha_beta(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in node.children:
            eval = alpha_beta(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def main():
    root = Node(state="root", value=None)

    # Create a sample tree
    child_A = Node(state="A")
    child_A.children = [Node(state="A1", value=3), Node(state="A2", value=5), Node(state="A3", value=6)]
    
    child_B = Node(state="B")
    child_B.children = [Node(state="B1", value=1), Node(state="B2", value=2), Node(state="B3", value=0)]
    
    child_C = Node(state="C")
    child_C.children = [Node(state="C1", value=5), Node(state="C2", value=7), Node(state="C3", value=8)]

    root.children = [child_A, child_B, child_C]

    best_value = alpha_beta(root, depth=3, alpha=float('-inf'), beta=float('inf'), maximizing_player=True)
    print(f"The best value found by Alpha-Beta pruning is: {best_value}")

if __name__ == "__main__":
    main()
