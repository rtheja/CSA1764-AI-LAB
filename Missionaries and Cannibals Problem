from collections import deque

class State:
    def __init__(self, missionaries_left, cannibals_left, boat_position):
        self.missionaries_left = missionaries_left
        self.cannibals_left = cannibals_left
        self.boat_position = boat_position

    def is_valid(self):
        if self.missionaries_left < 0 or self.cannibals_left < 0:
            return False
        if self.missionaries_left < self.cannibals_left and self.missionaries_left > 0:
            return False
        return True

    def is_goal(self):
        return self.missionaries_left == 0 and self.cannibals_left == 0

    def __hash__(self):
        return hash((self.missionaries_left, self.cannibals_left, self.boat_position))

    def __eq__(self, other):
        return (self.missionaries_left == other.missionaries_left and
                self.cannibals_left == other.cannibals_left and
                self.boat_position == other.boat_position)

def get_next_states(state):
    moves = [
        (1, 0),
        (0, 1),
        (1, 1),
        (0, 2),
        (2, 0)
    ]
    next_states = []
    
    for m, c in moves:
        if state.boat_position == 0:
            next_state = State(
                state.missionaries_left - m,
                state.cannibals_left - c,
                1
            )
        else:
            next_state = State(
                state.missionaries_left + m,
                state.cannibals_left + c,
                0
            )
        
        if next_state.is_valid():
            next_states.append(next_state)
    
    return next_states

def bfs():
    initial_state = State(3, 3, 0)
    queue = deque([initial_state])
    visited = {initial_state}
    parent_map = {initial_state: None}

    while queue:
        current_state = queue.popleft()

        if current_state.is_goal():
            return construct_solution(current_state, parent_map)

        for next_state in get_next_states(current_state):
            if next_state not in visited:
                visited.add(next_state)
                queue.append(next_state)
                parent_map[next_state] = current_state

    return None

def construct_solution(goal_state, parent_map):
    path = []
    while goal_state is not None:
        path.append(goal_state)
        goal_state = parent_map[goal_state]
    path.reverse()
    return path

def print_solution(solution):
    if solution is None:
        print("No solution found.")
        return
    
    for state in solution:
        print(f"Left: M={state.missionaries_left}, C={state.cannibals_left} | Boat: {'Left' if state.boat_position == 0 else 'Right'}")

if __name__ == "__main__":
    solution = bfs()
    print_solution(solution)
