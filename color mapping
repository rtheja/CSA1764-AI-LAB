class MapColoring:
    def __init__(self, graph, colors):
        self.graph = graph
        self.colors = colors
        self.solution = {}

    def is_safe(self, node, color):
        for neighbor in self.graph[node]:
            if neighbor in self.solution and self.solution[neighbor] == color:
                return False
        return True

    def solve(self):
        if self.backtrack():
            return self.solution
        else:
            return None

    def backtrack(self, node=0):
        if node == len(self.graph):
            return True
        
        for color in self.colors:
            if self.is_safe(node, color):
                self.solution[node] = color
                if self.backtrack(node + 1):
                    return True
                del self.solution[node]

        return False

if __name__ == "__main__":
    graph = {
        0: [1, 2],
        1: [0, 2, 3],
        2: [0, 1, 3],
        3: [1, 2],
    }
    
    colors = ['Red', 'Green', 'Blue']

    map_coloring = MapColoring(graph, colors)
    solution = map_coloring.solve()

    if solution:
        print("Coloring solution:")
        for node, color in solution.items():
            print(f"Node {node}: {color}")
    else:
        print("No solution exists.")
