from collections import deque

class State:
    def __init__(self, jug1, jug2, capacity1, capacity2):
        self.jug1 = jug1
        self.jug2 = jug2
        self.capacity1 = capacity1
        self.capacity2 = capacity2

    def __hash__(self):
        return hash((self.jug1, self.jug2))

    def __eq__(self, other):
        return self.jug1 == other.jug1 and self.jug2 == other.jug2

def is_goal(state, target):
    return state.jug1 == target or state.jug2 == target

def get_next_states(state):
    states = []
    jug1, jug2, capacity1, capacity2 = state.jug1, state.jug2, state.capacity1, state.capacity2

    states.append(State(0, jug2, capacity1, capacity2))
    states.append(State(jug1, 0, capacity1, capacity2))
    states.append(State(capacity1, jug2, capacity1, capacity2))
    states.append(State(jug1, capacity2, capacity1, capacity2))
    pour_to_jug2 = min(jug1, capacity2 - jug2)
    states.append(State(jug1 - pour_to_jug2, jug2 + pour_to_jug2, capacity1, capacity2))
    pour_to_jug1 = min(jug2, capacity1 - jug1)
    states.append(State(jug1 + pour_to_jug1, jug2 - pour_to_jug1, capacity1, capacity2))

    return states

def water_jug_problem(capacity1, capacity2, target):
    initial_state = State(0, 0, capacity1, capacity2)
    queue = deque([initial_state])
    visited = set()

    while queue:
        current_state = queue.popleft()

        if is_goal(current_state, target):
            return True

        visited.add(current_state)

        for next_state in get_next_states(current_state):
            if next_state not in visited:
                queue.append(next_state)

    return False

if __name__ == "__main__":
    capacity1 = 4
    capacity2 = 3
    target = 2
    if water_jug_problem(capacity1, capacity2, target):
        print("Target can be measured.")
    else:
        print("Target cannot be measured.")
